{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\FinanceManagement\\\\frontend\\\\src\\\\components\\\\ProtectedRoute.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react'; // Import hooks\nimport { Navigate, useNavigate } from 'react-router-dom'; // Import useNavigate for redirection\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const [isAuthenticated, setIsAuthenticated] = useState(null); // Authentication state\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n\n    // If no token, set authenticated as false and navigate to login\n    if (!token) {\n      setIsAuthenticated(false);\n      navigate('/login'); // Redirect to login if no token\n    } else {\n      try {\n        // Decode JWT token to extract expiry and other details\n        const decodedToken = JSON.parse(atob(token.split('.')[1])); // Decode JWT token\n        const isExpired = decodedToken.exp < Date.now() / 1000; // Check if the token is expired\n\n        if (isExpired) {\n          // Token expired, clean up and redirect\n          localStorage.removeItem('token');\n          setIsAuthenticated(false);\n          navigate('/login');\n        } else {\n          // Token is valid, set authenticated to true\n          setIsAuthenticated(true);\n        }\n      } catch (error) {\n        console.error('Error decoding token:', error);\n        setIsAuthenticated(false);\n        navigate('/login'); // In case decoding fails, redirect to login\n      }\n    }\n  }, [navigate]);\n\n  // Return a loading state while determining authentication status\n  if (isAuthenticated === null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 16\n    }, this); // Optional: Show a loading spinner while authentication is checked\n  }\n\n  // If authenticated, render children, else redirect to login\n  return isAuthenticated ? children : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/login\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 41\n  }, this); // Use Navigate to redirect to login if not authenticated\n};\n_s(ProtectedRoute, \"WVE0h/GSLJSkFXlQRDc6ZjSeUuo=\", false, function () {\n  return [useNavigate];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","useEffect","useState","Navigate","useNavigate","jsxDEV","_jsxDEV","ProtectedRoute","children","_s","navigate","isAuthenticated","setIsAuthenticated","token","localStorage","getItem","decodedToken","JSON","parse","atob","split","isExpired","exp","Date","now","removeItem","error","console","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","$RefreshReg$"],"sources":["D:/Projects/FinanceManagement/frontend/src/components/ProtectedRoute.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';  // Import hooks\r\nimport { Navigate, useNavigate } from 'react-router-dom';  // Import useNavigate for redirection\r\n\r\nconst ProtectedRoute = ({ children }) => {\r\n    const navigate = useNavigate();\r\n    const [isAuthenticated, setIsAuthenticated] = useState(null);  // Authentication state\r\n\r\n    useEffect(() => {\r\n        const token = localStorage.getItem('token');\r\n        \r\n        // If no token, set authenticated as false and navigate to login\r\n        if (!token) {\r\n            setIsAuthenticated(false);\r\n            navigate('/login');  // Redirect to login if no token\r\n        } else {\r\n            try {\r\n                // Decode JWT token to extract expiry and other details\r\n                const decodedToken = JSON.parse(atob(token.split('.')[1]));  // Decode JWT token\r\n                const isExpired = decodedToken.exp < Date.now() / 1000;  // Check if the token is expired\r\n\r\n                if (isExpired) {\r\n                    // Token expired, clean up and redirect\r\n                    localStorage.removeItem('token');\r\n                    setIsAuthenticated(false);\r\n                    navigate('/login');\r\n                } else {\r\n                    // Token is valid, set authenticated to true\r\n                    setIsAuthenticated(true);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error decoding token:', error);\r\n                setIsAuthenticated(false);\r\n                navigate('/login');  // In case decoding fails, redirect to login\r\n            }\r\n        }\r\n    }, [navigate]);\r\n\r\n    // Return a loading state while determining authentication status\r\n    if (isAuthenticated === null) {\r\n        return <div>Loading...</div>;  // Optional: Show a loading spinner while authentication is checked\r\n    }\r\n\r\n    // If authenticated, render children, else redirect to login\r\n    return isAuthenticated ? children : <Navigate to=\"/login\" />;  // Use Navigate to redirect to login if not authenticated\r\n};\r\n\r\nexport default ProtectedRoute;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO,CAAC,CAAE;AACrD,SAASC,QAAQ,EAAEC,WAAW,QAAQ,kBAAkB,CAAC,CAAE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAMC,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACO,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAE;;EAE/DD,SAAS,CAAC,MAAM;IACZ,MAAMY,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;;IAE3C;IACA,IAAI,CAACF,KAAK,EAAE;MACRD,kBAAkB,CAAC,KAAK,CAAC;MACzBF,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAE;IACzB,CAAC,MAAM;MACH,IAAI;QACA;QACA,MAAMM,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACN,KAAK,CAACO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAE;QAC7D,MAAMC,SAAS,GAAGL,YAAY,CAACM,GAAG,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAE;;QAEzD,IAAIH,SAAS,EAAE;UACX;UACAP,YAAY,CAACW,UAAU,CAAC,OAAO,CAAC;UAChCb,kBAAkB,CAAC,KAAK,CAAC;UACzBF,QAAQ,CAAC,QAAQ,CAAC;QACtB,CAAC,MAAM;UACH;UACAE,kBAAkB,CAAC,IAAI,CAAC;QAC5B;MACJ,CAAC,CAAC,OAAOc,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC7Cd,kBAAkB,CAAC,KAAK,CAAC;QACzBF,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAE;MACzB;IACJ;EACJ,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;;EAEd;EACA,IAAIC,eAAe,KAAK,IAAI,EAAE;IAC1B,oBAAOL,OAAA;MAAAE,QAAA,EAAK;IAAU;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,CAAC,CAAE;EACnC;;EAEA;EACA,OAAOpB,eAAe,GAAGH,QAAQ,gBAAGF,OAAA,CAACH,QAAQ;IAAC6B,EAAE,EAAC;EAAQ;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,CAAC,CAAE;AACnE,CAAC;AAACtB,EAAA,CAzCIF,cAAc;EAAA,QACCH,WAAW;AAAA;AAAA6B,EAAA,GAD1B1B,cAAc;AA2CpB,eAAeA,cAAc;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}