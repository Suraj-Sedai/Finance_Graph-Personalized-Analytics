{"ast":null,"code":"var _s = $RefreshSig$();\n// src/components/ProtectedRoute.js\nimport React, { useEffect } from 'react';\nimport { Navigate } from 'react-router-dom'; // for redirection\nimport { useNavigate } from 'react-router-dom';\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children\n}) => {\n  _s();\n  const navigate = useNavigate();\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      navigate('/login'); // Redirect to login if no token\n    } else {\n      const decodedToken = JSON.parse(atob(token.split('.')[1])); // Decode JWT token\n      const isExpired = decodedToken.exp < Date.now() / 1000; // Check expiration time\n\n      if (isExpired) {\n        localStorage.removeItem('token'); // Remove expired token\n        navigate('/login'); // Redirect to login if token expired\n      }\n    }\n  }, [navigate]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false); // Render children if the user is authenticated\n};\n_s(ProtectedRoute, \"0pNeyzXk/ByIxyERsdaIrG6js9s=\", false, function () {\n  return [useNavigate];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","useEffect","Navigate","useNavigate","Fragment","_Fragment","jsxDEV","_jsxDEV","ProtectedRoute","children","_s","navigate","token","localStorage","getItem","decodedToken","JSON","parse","atob","split","isExpired","exp","Date","now","removeItem","_c","$RefreshReg$"],"sources":["D:/Projects/FinanceManagement/frontend/src/components/ProtectedRoute.js"],"sourcesContent":["// src/components/ProtectedRoute.js\r\nimport React, { useEffect } from 'react';\r\nimport { Navigate } from 'react-router-dom';  // for redirection\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst ProtectedRoute = ({ children }) => {\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        const token = localStorage.getItem('token');\r\n        if (!token) {\r\n            navigate('/login');  // Redirect to login if no token\r\n        } else {\r\n            const decodedToken = JSON.parse(atob(token.split('.')[1])); // Decode JWT token\r\n            const isExpired = decodedToken.exp < Date.now() / 1000;  // Check expiration time\r\n            \r\n            if (isExpired) {\r\n                localStorage.removeItem('token');  // Remove expired token\r\n                navigate('/login');  // Redirect to login if token expired\r\n            }\r\n        }\r\n    }, [navigate]);\r\n\r\n    return <>{children}</>;  // Render children if the user is authenticated\r\n};\r\n\r\nexport default ProtectedRoute;\r\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,QAAQ,QAAQ,kBAAkB,CAAC,CAAE;AAC9C,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,QAAA,IAAAC,SAAA,EAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAE9BF,SAAS,CAAC,MAAM;IACZ,MAAMW,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI,CAACF,KAAK,EAAE;MACRD,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAE;IACzB,CAAC,MAAM;MACH,MAAMI,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACN,KAAK,CAACO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC5D,MAAMC,SAAS,GAAGL,YAAY,CAACM,GAAG,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAE;;MAEzD,IAAIH,SAAS,EAAE;QACXP,YAAY,CAACW,UAAU,CAAC,OAAO,CAAC,CAAC,CAAE;QACnCb,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAE;MACzB;IACJ;EACJ,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEd,oBAAOJ,OAAA,CAAAF,SAAA;IAAAI,QAAA,EAAGA;EAAQ,gBAAG,CAAC,CAAC,CAAE;AAC7B,CAAC;AAACC,EAAA,CAnBIF,cAAc;EAAA,QACCL,WAAW;AAAA;AAAAsB,EAAA,GAD1BjB,cAAc;AAqBpB,eAAeA,cAAc;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}